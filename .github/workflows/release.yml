name: Release

on:
  push:
    tags:
      - "v*"            # 例: v1.2.3
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name (e.g., v1.2.3)"
        required: true
      release_name:
        description: "Release title (defaults to tag name)"
        required: false

permissions:
  contents: write         # Release 作成で必要
  id-token: write         # （任意）--provenance を使う場合に必要

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.0
          registry-url: https://registry.npmjs.org

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies (workspace aware)
        run: pnpm install

      - name: Build SDK artifacts
        run: pnpm run --filter packages/sdk build

      - name: Build application bundles
        run: pnpm run build

      - name: Build CLI runtime
        run: pnpm run build:cli

      - name: Verify artifacts exist
        run: |
          echo "Checking CLI artifacts"
          cd packages/cli
          CLI_EXPORTS=(
            "dist/runtime/backend/dist/index.js"
            "dist/runtime/backend/dist/services/src/execution/index.js"
            "dist/runtime/backend/dist/services/src/logs/index.js"
            "dist/runtime/backend/dist/server/src/routes/index.js"
            "dist/runtime/backend/dist/utils/src/logger.js"
          )
          MISSING=0
          for file in "${CLI_EXPORTS[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing CLI artifact: $file"
              MISSING=$((MISSING + 1))
            else
              echo "✅ Found CLI artifact: $file"
            fi
          done
          if [ $MISSING -gt 0 ]; then
            exit 1
          fi

          echo "Checking SDK artifacts"
          cd ../sdk
          SDK_EXPORTS=(
            "dist/esm/index.js"
            "dist/cjs/index.js"
            "dist/types/index.d.ts"
            "dist/esm/services/logs/index.js"
            "dist/esm/services/execution/index.js"
            "dist/esm/server/routes/index.js"
            "dist/esm/utils/logger.js"
          )
          MISSING=0
          for file in "${SDK_EXPORTS[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing SDK artifact: $file"
              MISSING=$((MISSING + 1))
            else
              echo "✅ Found SDK artifact: $file"
            fi
          done
          if [ $MISSING -gt 0 ]; then
            exit 1
          fi

      # 任意: タグと package.json の version を突き合わせて安全確認
      - name: Verify tag and package versions match
        id: ver
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag_name }}"
          else
            TAG="${{ github.ref_name }}"
          fi

          CLI_VERSION=$(node -p "require('./packages/cli/package.json').version")
          SDK_VERSION=$(node -p "require('./packages/sdk/package.json').version")

          if [ "v${CLI_VERSION}" != "$TAG" ]; then
            echo "Tag (${TAG}) and packages/cli/package.json version (v${CLI_VERSION}) mismatch" >&2
            exit 1
          fi
          if [ "v${SDK_VERSION}" != "$TAG" ]; then
            echo "Tag (${TAG}) and packages/sdk/package.json version (v${SDK_VERSION}) mismatch" >&2
            exit 1
          fi

          echo "cli_version=${CLI_VERSION}" >> "$GITHUB_OUTPUT"
          echo "sdk_version=${SDK_VERSION}" >> "$GITHUB_OUTPUT"

      # 任意: すでに同じ version が公開済みならスキップ
      - name: Check if SDK version already published
        id: sdk_published
        run: |
          NAME=$(node -p "require('./packages/sdk/package.json').name")
          VERSION=${{ steps.ver.outputs.sdk_version }}
          if npm view "$NAME@$VERSION" version >/dev/null 2>&1; then
            echo "published=true" >> "$GITHUB_OUTPUT"
            echo "$NAME@$VERSION is already published. Skipping SDK publish."
          else
            echo "published=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Debug npm auth token
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -z "$NPM_TOKEN" ]; then
            echo "NPM_TOKEN is empty" >&2
            exit 1
          fi
          echo "NPM_TOKEN length: ${#NPM_TOKEN}"
          npm whoami || echo "npm whoami failed"

      - name: Publish SDK to npm
        if: steps.sdk_published.outputs.published == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd packages/sdk
          npm publish --access public

      - name: Check if CLI version already published
        id: cli_published
        run: |
          NAME=$(node -p "require('./packages/cli/package.json').name")
          VERSION=${{ steps.ver.outputs.cli_version }}
          if npm view "$NAME@$VERSION" version >/dev/null 2>&1; then
            echo "published=true" >> "$GITHUB_OUTPUT"
            echo "$NAME@$VERSION is already published. Skipping CLI publish."
          else
            echo "published=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish CLI to npm
        if: steps.cli_published.outputs.published == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd packages/cli
          npm publish --access public

      - name: Determine release metadata
        id: meta
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag_name }}" >> "$GITHUB_OUTPUT"
            if [ -n "${{ github.event.inputs.release_name }}" ]; then
              echo "name=${{ github.event.inputs.release_name }}" >> "$GITHUB_OUTPUT"
            else
              echo "name=${{ github.event.inputs.tag_name }}" >> "$GITHUB_OUTPUT"
            fi
            echo "target=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
            echo "name=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
            echo "target=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          target_commitish: ${{ steps.meta.outputs.target }}
          body: "Automated release for ${{ steps.meta.outputs.tag }}"
          draft: false
          prerelease: false
          generate_release_notes: true
